import { InputStream } from "./InputStream";
import { ParserOptions } from "./types/ParserOptions";
import { CommandPart, CommandFlag, CommandArgument, StringArgument, Command } from "./types/types";
/**
 * Class for parsing commands.
 */
export declare class Parser {
    /**
     * The source input stream.
     */
    readonly source: InputStream;
    /**
     * The parser options.
     */
    readonly options: ParserOptions;
    /**
     * The parsing mode stack.
     */
    private modeStack;
    /**
     * @param source The source string.
     * @param options The parser options.
     */
    constructor(source: string, options: ParserOptions);
    /**
     * @param source The source input stream.
     * @param options The parser options.
     */
    constructor(source: InputStream, options: ParserOptions);
    /**
     * The current parsing mode.
     */
    private get mode();
    /**
     * Resets the parser state.
     */
    reset(): void;
    /**
     * Matches the rest of the source and returns it as a string.
     */
    matchRest(): StringArgument;
    /**
     * Tries to parse a command.
     */
    command(): Command | null;
    /**
     * Parses command parts while the source is valid and the desired part count is not reached (if set).
     * @param count Number of parts to parse.
     */
    commandParts(count?: number): CommandPart[];
    /**
     * Tries to parse a command part.
     */
    commandPart(): CommandPart | null;
    /**
     * Tries to parse a command flag.
     */
    flag(): CommandFlag | null;
    /**
     * Tries to parse a command argument.
     */
    argument(): CommandArgument | null;
    /**
     * Tries to match a rest marker.
     * If matched, matches and returns the rest of the source as a string argument.
     * Otherwise, returns null.
     */
    rest(): StringArgument | null;
    /**
     * Tries to parse a string argument.
     */
    string(): StringArgument | null;
    /**
     * Tries to parse a quoted string argument.
     */
    quoted(): StringArgument | null;
    /**
     * Tries to parse a simple or an empty argument.
     */
    simpleOrEmpty(): CommandArgument | null;
    /**
     * Tries to parse a simple string argument (anything which is not a marker).
     */
    simple(): StringArgument | null;
    /**
     * Returns the corresponding closing quote for the opening one.
     * @param opening The opening quote.
     */
    private getClosingQuote;
    /**
     * Returns the opening quote presented at the current source position, if any.
     */
    private findPresentingOpeningQuote;
    /**
     * Skips all subsequent separators.
     */
    skipSeparators(): void;
}

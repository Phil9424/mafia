import { InputStream as _InputStream } from "@4erem6a/inputstream";
import { Lexeme } from "./types/ParserOptions";
/**
 * Utility class for string analysis.
 */
export declare class InputStream extends _InputStream {
    /**
     * Makes a regexp match from the start of the string if it's not.
     * @param regexp A regexp to normalize.
     */
    static normalizeRegexp(regexp: RegExp): RegExp;
    /**
     * Tries to match a lexeme.
     * @param lexeme A lexeme or an array of lexemes to match.
     * @param offset Matching position offset.
     */
    matchLexeme(lexeme: Lexeme | Lexeme[], offset?: number): boolean;
    /**
     * Looks whether a lexeme of any of lexemes is present at the current position.
     * @param lexeme A lexeme or an array of lexemes to look for.
     * @param offset Matching position offset.
     */
    lookForLexeme(lexeme: Lexeme | Lexeme[], offset?: number): boolean;
    /**
     * Returns the first matching lexeme from an array or undefined.
     * @param lexemes An array of lexemes to search in.
     * @param offset Matching position offset.
     */
    findMatchingLexeme(lexemes: Lexeme[], offset?: number): Lexeme | undefined;
    /**
     * Returns the first lexeme from an array that is present at the current position.
     * @param lexemes An array of lexemes to search in.
     * @param offset Matching position offset.
     */
    findPresentingLexeme(lexemes: Lexeme[], offset?: number): Lexeme | undefined;
    /**
     * Returns the length of a lexeme or 0 if it's not present.
     * @param lexeme A lexeme to measure.
     * @param offset Matching position offset.
     */
    measureLexeme(lexeme: Lexeme, offset?: number): number;
}

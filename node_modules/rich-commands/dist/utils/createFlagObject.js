"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
/**
 * Returns the first element of an array if it is the only one.
 * @param arr The array to work with.
 * @ignore
 */
function getFirstIfOnly(arr) {
    return arr.length == 1 ? arr[0] : arr;
}
/**
 * Shorthand for String#localeCompare to perform case insensitive string comparison.
 * @param str1 The first string to be compared.
 * @param str2 The second string to be compared.
 * @ignore
 */
function compareStrings(str1, str2, caseSensitivity) {
    return (str1.localeCompare(str2, undefined, {
        sensitivity: caseSensitivity ? "variant" : "accent"
    }) == 0);
}
/**
 * Makes flag object keys case insensitive.
 * @param flagObject The flag object to make case insensitive.
 * @ignore
 */
function makeCaseInsensitive(flagObject) {
    return new Proxy(flagObject, {
        get(target, key) {
            var _a;
            return (_a = Object.entries(target).find(([k]) => compareStrings(k, key.toString(), false))) === null || _a === void 0 ? void 0 : _a[1];
        },
        has(target, key) {
            const matchingKey = Object.keys(target).find(k => compareStrings(k, key.toString(), false));
            return matchingKey ? Reflect.has(target, matchingKey) : false;
        }
    });
}
/**
 * Creates the flag object from raw command flags.
 * @param flags Raw command flags.
 * @param options Flag object options.
 * Flag object options override the {@link defaultFlagObjectOptions default ones},
 * if you want to disable a flag object option then you should explicitly set it to undefined.
 */
function createFlagObject(flags, options = {}) {
    const { allowArrayValues, caseInsensitiveFlags } = Object.assign(Object.assign({}, constants_1.defaultFlagObjectOptions), options);
    const isUniqueFlagName = (names, name) => !names.some(n => compareStrings(n, name, !caseInsensitiveFlags));
    const names = flags
        .map(flag => flag.name)
        .reduce((names, name) => isUniqueFlagName(names, name) ? [...names, name] : names, []);
    const flagNameFilter = (name) => (flag) => compareStrings(flag.name, name, !caseInsensitiveFlags);
    const entries = names.map(name => {
        var _a;
        return ({
            [name]: allowArrayValues
                ? getFirstIfOnly(flags.filter(flagNameFilter(name)).map(flag => flag.value))
                : (_a = flags.find(flagNameFilter(name))) === null || _a === void 0 ? void 0 : _a.value
        });
    });
    const flagObject = entries.reduce((acc, v) => (Object.assign(Object.assign({}, acc), v)), {});
    return caseInsensitiveFlags ? makeCaseInsensitive(flagObject) : flagObject;
}
exports.createFlagObject = createFlagObject;
